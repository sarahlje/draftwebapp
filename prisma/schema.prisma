// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// A simplified exercise model
model Exercise {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?
  muscleGroup  String   // Primary muscle group (e.g., "chest", "back", "legs")
  equipment    String?  // Equipment needed (e.g., "dumbbells", "bodyweight", "barbell")
  difficulty   String   // "beginner", "intermediate", or "advanced"
  category     String   // "strength", "cardio", or "flexibility"
  instructions String?  // How to perform the exercise
  imageUrl     String?  // Optional image URL
  workouts     WorkoutExercise[]
  createdAt    DateTime @default(now())
}

// User model for storing user information
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  workouts  Workout[]
}

// Workout model for generated workouts
model Workout {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  duration    Int       // Duration in minutes
  difficulty  String    // "beginner", "intermediate", or "advanced"
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  exercises   WorkoutExercise[]
  createdAt   DateTime  @default(now())
  isFavorite  Boolean   @default(false)
}

// Junction table for exercises in a workout
model WorkoutExercise {
  id         Int      @id @default(autoincrement())
  workoutId  Int
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  sets       Int      // Number of sets
  reps       String   // Range like "8-12" or specific like "10"
  order      Int      // Order in the workout
  restTime   Int      // Rest time in seconds

  @@unique([workoutId, order])
}